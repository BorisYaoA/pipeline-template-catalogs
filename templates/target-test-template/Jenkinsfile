@Library('FCDS-infra') _

pipeline {
    // Run on controller
    agent none
    environment {
        REST_CREDS=credentials("sys_cr")
        GIT_TOKEN_CREDS = credentials("sys-cr-fw")
        ARTIFACT_CREDS = credentials("sys_artsbios")
        ONETAS_TOKEN_CREDS = credentials("onetas_token")
        FDWS = credentials("FDWS")
        cov_scan = credentials("cov_scan")
        SPLUNK_CREDS=credentials("splunk")
        rabbitmq = credentials("rabbitmq")
        CI_ENV="True"
        NUMBER_OF_PROCESSORS="8"
        CI_SYSTEM = "jenkins"
        vcsless = "True"
    }
    parameters{
        string(name: "AGENT_TYPE", defaultValue: "static")
        string(name: "AGENT_OS", defaultValue: null)
        string(name: "KUBERNETES_CLOUD", defaultValue: 'Kubernetes')
        //
        string(name: "KUBERNETES_IMAGE_NAME", defaultValue: "amr-registry.caas.intel.com/fia-cloud/cbj-agent-ubuntu16/l3-common:20230927")
        string(name: "KUBERNETES_SLAVE_CONNECT_TIMEOUT", defaultValue: "300")
        string(name: "container_memory", defaultValue: "4Gi")
        string(name: "container_ephemeral_storage", defaultValue: "10Gi")
        string(name: "container_cpu", defaultValue: "1")
        string(name: "mirrorURL_github", defaultValue: "xs-tcbuild17.jf.intel.com")
        string(name: "remoteSshUser", defaultValue: "sys_cr")
        string(name: "jsonPinFileList", defaultValue: null)
        string(name: "CheckoutCrManifest", defaultValue: "iafw-cr-manifest")

    	// Source control and test parameters
        string(name: "control_build_link", defaultValue: "")
        string(name: "control_build_type", defaultValue: "")
        string(name: "change_link", defaultValue: null)
        string(name: "commit_sha", defaultValue: "''")
        string(name: "repo_name", defaultValue: "''")
        string(name: "repo_branch", defaultValue: "main")
        string(name: "code", defaultValue: "''")
        string(name: "combo", defaultValue: "''")
        string(name: "target", defaultValue: "''")
        string(name: "target_build_link", defaultValue: "''")
        string(name: "test_plans", defaultValue: "''")
        string(name: "auto_task_id", defaultValue: "''")
        string(name: "scope", defaultValue: "''")
        string(name: "local_build_type", defaultValue: "bios")
        string(name: "upstream_service", defaultValue: "CBJ")
        string(name: "category", defaultValue: "ci")
        string(name: "triggered_by", defaultValue: "auto")
        string(name: "bios_version", defaultValue: "''")
        string(name: "trigger_type", defaultValue: "trigger")
        string(name: "retry_all", defaultValue: "false")
        string(name: "device_type", defaultValue: "''")
        string(name: "original_target_test_upstream_job", defaultValue: "''")
        string(name: "original_meta_task_id", defaultValue: "''")
        string(name: "ext_info", defaultValue: "{}")
        string(name: "onetas_url", defaultValue: "https://1tas-test-api.intel.com")
        string(name: "onetas_task_link", defaultValue: "https://1tas.intel.com/meta_task")
        string(name: "build_retention_days", defaultValue: "60")
        string(name: "timeout_unit", defaultValue: "MINUTES")
        string(name: "pipeline_timeout_duration", defaultValue: "240")
        string(name: "clean_workspace", defaultValue: "true")
        string(name: "target_url", defaultValue: "")
        string(name: "dryRun", defaultValue: "false")
        string(name: "timeout", defaultValue: "180")
        string(name: "CI_VERSION", defaultValue: "0.0.28")
        string(name: "control_test_id", defaultValue: "")
        string(name: "control_json", defaultValue: null)
        string(name: "original_auto_task_id", defaultValue: "")
        string(name: "test_link", defaultValue: "")
    }
    options {
        buildDiscarder(logRotator(
                                daysToKeepStr: build_retention_days,
                                artifactDaysToKeepStr: build_retention_days
                                )
                      )
        timeout(time: pipeline_timeout_duration, unit: timeout_unit)
    }
    stages{
        // Run only if static agent is selected
        stage("Static Agent build") {
            when {
                beforeAgent true
                expression {
                    return pipelineCommon.run_on_static_agent() }
            }
            agent {
                // static agent will use agent_os as label because it's only on Windows os
                // doesn't need extra label to distinguish Windows or Linux.
                label params.AGENT_OS
            }
            environment {
                checkoutdir = "${env.WORKSPACE}"
                PYTHONPATH="${env.WORKSPACE}/iafw-cr-tools"
                CI_SYSTEM="jenkins"
            }
            steps {
                script {
                    pipelineCommon.target_test_steps()
                }
            }
        }
        // Run only if dynamic windows agent is selected
        stage("windows dynamic Agent") {
            when {
                beforeAgent true
                expression {
                    return pipelineCommon.run_on_dynamic_windows_agent() }
            }
            agent {
              kubernetes {
                cloud 'FCDS Windows Kubernetes'
                customWorkspace '/ss'
                yaml    """
                apiVersion: v1
                kind: Pod
                spec:
                  tolerations:
                  - effect: NoSchedule
                    key: custom/build-hosts
                    operator: Exists
                  containers:
                  - name: jnlp
                    image: amr-registry.caas.intel.com/fia-cloud/cbjagent-wk/oakstream:server2022-202402201245
                    command:
                    - powershell
                    args:
                    - cp -R C:\\privconf\\*  C:\\Users\\ContainerAdministrator;
                    - C:\\jenkinsscript\\jenkins.ps1
                    resources:
                      limits:
                        cpu: "1"
                        memory: 4Gi
                      requests:
                        cpu: "1"
                        memory: 4Gi
                    env:
                    - name: MY_POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: MY_HOST_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    volumeMounts:
                    - mountPath: /privconf
                      name: credential-volume
                    - mountPath: /gitcache
                      name: cache-volume
                    - mountPath: /jenkinsscript
                      name: jenkins-script
                  volumes:
                  - hostPath:
                      path: D:/agentconf
                      type: ""
                    name: credential-volume
                  - hostPath:
                      path: D:/agentcache
                      type: ""
                    name: cache-volume
                  - configMap:
                      defaultMode: 420
                      name: jenkins-script
                    name: jenkins-script
                  nodeSelector:
                    custom/os: 2022
                """
              }
              }
            environment {
                checkoutdir = "${env.WORKSPACE}"
                PYTHONPATH="iafw-cr-tools"
                CI_SYSTEM="jenkins"
            }
            steps {
                script {
                    println "windows container"
                    pipelineCommon.target_test_steps()
                }
            }
        }
        // Run only if dynamic linux agent is selected
        stage("linux dynamic Agent") {
            when {
                beforeAgent true
                expression {
                    return pipelineCommon.run_on_dynamic_linux_agent() }
            }
            agent {
                kubernetes {
                  cloud "$KUBERNETES_CLOUD"
                  slaveConnectTimeout 300
                  yaml  """
                    apiVersion: "v1"
                    kind: "Pod"
                    spec:
                      containers:
                      - args:
                        - "/home/jenkins/credential_prepare.sh&&sleep 9999999"
                        command:
                        - "sh"
                        - "-c"
                        image: ${params.KUBERNETES_IMAGE_NAME}
                        imagePullPolicy: "IfNotPresent"
                        name: "ub16"
                        resources:
                          limits:
                            memory: ${container_memory}
                            ephemeral-storage: ${container_ephemeral_storage}
                            cpu: ${container_cpu}
                        securityContext:
                          privileged: false
                          runAsGroup: 1000
                          runAsUser: 1000
                        tty: false
                        volumeMounts:
                        - mountPath: "/home/temp"
                          name: "volume-0"
                          readOnly: false
                        - mountPath: "/home/jenkins/gitcache"
                          name: "volume-1"
                          readOnly: false
                        - mountPath: "/home/jenkins/agent"
                          name: "workspace-volume"
                          readOnly: false
                        workingDir: "/home/jenkins/agent"
                      enableServiceLinks: false
                      hostNetwork: false
                      nodeSelector:
                        custom/buildhost: "linux"
                      restartPolicy: "Never"
                      volumes:
                      - configMap:
                          name: "linuxsshconfig"
                          optional: false
                        name: "volume-0"
                      - hostPath:
                          path: "/localdisk/agentcache"
                        name: "volume-1"
                      - emptyDir:
                          medium: ""
                        name: "workspace-volume"
                    """
                }
            }
            environment {
                checkoutdir = "${env.WORKSPACE}"
                PYTHONPATH="iafw-cr-tools"
                CI_SYSTEM="jenkins"
            }
            steps {
                script {
                    pipelineCommon.target_test_steps()
                }
            }
        }
    }
}
