@Library("FCDS-infra") _

def trigger_jobs(build_with_testplan_list){
    def parallelstages=[:]
    build_with_testplan_list.each { p ->
        parallelstages[p.key] = {
            def target_build_link
            def build_number
            stage("${p.key}"){
                echo "${p.key} running"
                echo "Printing Skip Build Param - ${p.value.parameters_dict['skip_build']}"
                if ((p.value.parameters_dict['skip_build']) == "True"){
                    echo "Skipping build, URL of Original Target - ${p.value.parameters_dict['target_url']}"
                    target_build_link = p.value.parameters_dict['target_url']
                }
                else{
                    // steps{
                        def buildjobA = build job:"${p.key}", propagate:false, wait:true, parameters:p.value.parameters
                        build_number = buildjobA.getNumber()
                        target_build_link = buildjobA.getAbsoluteUrl()
                        if (buildjobA.result == "FAILURE"){
                            currentBuild.result="FAILURE"
                            println "build failed, skip test"
                            sh "exit 1"
                        // }
                        }
                }
            }
            if (p.value.test_dict){
                stage("trigger test for ${p.key}"){
                    println target_build_link
                    trigger_tests(p,target_build_link,build_number)
                }
            } else {
                println "skip test stage without testplans"
            }
        }
    }
    parallel parallelstages
}

def trigger_tests(p, target_build_link,build_number){
    def paralleltests=[:]
    p.value.test_dict.each { t->
        println(t)
        paralleltests[t] = {
            stage("${t.key}") {
                println t
                echo "build ${p.key} finished, running test ${t}"
                p.value.parameters_dict.put("target_build_link","${target_build_link}")
                p.value.parameters_dict.put("testplans","${t.value}")
                p.value.parameters_dict.put("scope","${t.key}")
                def parametersForTest = [string(name:'control_build_link', value: p.value.parameters_dict['control_build_link']),
                                                string(name:'control_build_type', value: p.value.parameters_dict['control_build_type']),
                                                string(name:'change_link', value: p.value.parameters_dict['change_link']),
                                                string(name:'commit_sha', value: p.value.parameters_dict['commit_sha']),
                                                string(name:'repo_name', value: p.value.parameters_dict['repo_name']),
                                                string(name:'repo_branch', value: p.value.parameters_dict['repo_branch']),
                                                string(name:'code', value: p.value.parameters_dict['code']),
                                                string(name:'combo', value: p.value.parameters_dict['combo']),
                                                string(name:'target', value:p.value.parameters_dict['target']),
                                                string(name:'scope', value: p.value.parameters_dict['scope']),
                                                string(name:'test_plans', value: p.value.parameters_dict['testplans']),
                                                string(name:'AGENT_TYPE', value: p.value.parameters_dict['AGENT_TYPE']),
                                                string(name:'AGENT_OS', value: p.value.parameters_dict['AGENT_OS']),
                                                string(name:'target_build_link', value: p.value.parameters_dict['target_build_link']),
                                                string(name:'jsonPinFileList', value: p.value.parameters_dict['jsonPinFileList']),
                                                string(name:'auto_task_id', value: p.value.parameters_dict['auto_task_id']),
                                                string(name:'original_auto_task_id', value: p.value.parameters_dict['original_auto_task_id']),
                                                string(name:'test_link', value: BUILD_URL),
                                                string(name:'skip_build', value: p.value.parameters_dict['skip_build'])
                                                ]
                println "parametersforTest"
                println parametersForTest
                def buildjob = build job:"test-testtemplate", propagate: false, wait:true, parameters:parametersForTest
                if (buildjob.result == "FAILURE") {
                    currentBuild.result="FAILURE"
                    sh "exit 1"
                }
            }
        }
    }
    parallel paralleltests
}

build_dict = [:] // dict=['build1':['parameters':[parameterlist], 'testplans':[testplans]], 'build2':['parameters':[parameterlist], 'testplans':[testplans]]]
commit_id = "" // github PR HEAD SHA
githubUrl = "" // github PR URL
target_url = "" // Report url set on github details
dryRun = "" // dryrun flag, set to value "true" or "false"

pipeline {
    agent none
    environment{
        SPLUNK_CREDS=credentials("splunk")
        CI_VERSION="0.0.28"
    }
    parameters {
        string(name: "control_json", defaultValue: null)
    }
    stages {
        stage('process') {
              agent {
                kubernetes {
                  cloud "FCDS Linux Kubernetes"
                  slaveConnectTimeout 300
                  yaml  """
                    apiVersion: "v1"
                    kind: "Pod"
                    spec:
                      tolerations:
                        - effect: NoSchedule
                          key: custom/build-hosts
                          operator: Exists
                      containers:
                      - name: jnlp
                        image: "amr-registry.caas.intel.com/fia-cloud/cbjagent-ubuntu18/common:ubuntu18-20240417201849"
                        imagePullPolicy: "IfNotPresent"
                        command:
                        - "sh"
                        args:
                        - "-c"
                        - "/home/jenkins/credential_prepare.sh && sh /home/jenkins/agent-script/jenkins-agent && sleep 9999999"
                        resources:
                          limits:
                            memory: "4Gi"
                            ephemeral-storage: "200Gi"
                            cpu: "1"
                          requests:
                            cpu: "1"
                            memory: "4Gi"
                        env:
                        - name: MY_POD_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.name
                        - name: MY_HOST_NAME
                          valueFrom:
                            fieldRef:
                              fieldPath: spec.nodeName
                        securityContext:
                          privileged: false
                          runAsGroup: 1000
                          runAsUser: 1000
                        tty: false
                        volumeMounts:
                        - mountPath: "/home/temp"
                          name: "volume-0"
                          readOnly: false
                        - mountPath: "/home/jenkins/gitcache"
                          name: "volume-1"
                        - mountPath: "/home/jenkins/agent-script"
                          name: "volume-2"
                          readOnly: false
                        - mountPath: "/home/jenkins/agent"
                          name: "workspace-volume"
                          readOnly: false
                        workingDir: "/home/jenkins/agent"
                      enableServiceLinks: false
                      hostNetwork: false
                      nodeSelector:
                        custom/buildhost: "linux"
                      restartPolicy: "Never"
                      volumes:
                      - configMap:
                          name: "linuxsshconfig"
                          optional: false
                        name: "volume-0"
                      - hostPath:
                          path: "/localdisk/agentcache"
                        name: "volume-1"
                      - configMap:
                          name: "jenkins-agent"
                          optional: false
                        name: "volume-2"
                      - emptyDir:
                          medium: ""
                        name: "workspace-volume"
                    """
                }
              }
            environment{
                PATH="${env.WORKSPACE}:${env.PATH}"
            }
            steps {
                script{
                    sh "echo '${params.control_json}' > control.json"
                    def platform_count = sh(script: "jq -r '.\"${jenkins_url}\" | length' control.json", returnStdout:true).trim().toInteger()
                    commit_id = sh(script: "jq -r '.\"build.vcs.number\"' control.json", returnStdout:true).trim()
                    githubUrl = sh(script: "jq -r '.\"githubUrl\"' control.json", returnStdout:true).trim()
                    def githubBaseSha = sh(script: "jq -r '.\"githubBaseSha\"' control.json", returnStdout:true).trim()
                    def parentBuildUrl = sh(script: "jq -r '.\"parentBuildUrl\"' control.json", returnStdout:true).trim()
                    def auto_task_id = sh(script: "jq -r '.\"auto_task_id\"' control.json", returnStdout:true).trim()
                    def original_auto_task_id = sh(script: "jq -r '.\"original_auto_task_id\"' control.json", returnStdout:true).trim()
                    def parentBuildName = sh(script: "jq -r '.\"parentBuildName\"' control.json", returnStdout:true).trim()
                    def buildtype = sh(script: "jq -r '.\"buildtype\"' control.json", returnStdout:true).trim()
                    def reviewBranch = sh(script: "jq -r '.\"reviewBranch\"' control.json", returnStdout:true).trim()
                    def orig_control_build_id = sh(script: "jq -r '.\"orig_control_build_id\"' control.json", returnStdout:true).trim()
                    def orig_control_build_server = sh(script: "jq -r '.\"orig_control_build_server\"' control.json", returnStdout:true).trim()
                    def first_run = sh(script: "jq -r '.\"first_run\"' control.json", returnStdout:true).trim()
                    target_url = sh(script: "jq -r '.\"target_url\"' control.json", returnStdout:true).trim()
                    dryRun = sh(script: "jq -r '.\"dryRun\"' control.json", returnStdout:true).trim()
                    for(int i=0;i<platform_count;i++){
                        def combo_count = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|length' control.json", returnStdout:true).trim().toInteger()
                        for(int j=0;j<combo_count;j++){
                            def combo_properties =  sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].combo_properties' control.json", returnStdout:true).trim()
                            def pinfilelist = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].combo_properties.jsonPinFileList' control.json", returnStdout:true).trim()
                            def target_build_count = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|length' control.json", returnStdout:true).trim().toInteger()
                            for (int k=0;k<target_build_count;k++){
                                def target_build = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].project_path' control.json", returnStdout:true).trim()
                                def agent_type = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].agent_info[1]' control.json", returnStdout:true).trim()
                                def agent_os = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].agent_info[2]' control.json", returnStdout:true).trim()
                                def agent_image_link = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].agent_info[3]' control.json", returnStdout:true).trim()
                                def testplans = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].testplans' control.json", returnStdout:true).trim()
                                def targetType = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].targetType' control.json", returnStdout:true).trim()
                                def scope = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].scope' control.json", returnStdout:true).trim()
                                def skip_build = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].skip_build' control.json", returnStdout:true).trim()
                                def target_url = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].target_url' control.json", returnStdout:true).trim()
                                def device_type = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].device_type' control.json", returnStdout:true).trim()
                                def retry_all_tests = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].retry_all_tests' control.json", returnStdout:true).trim()
                                def rerun = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].rerun' control.json", returnStdout:true).trim()
                                def timeout = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].timeout' control.json", returnStdout:true).trim()
                                def githubRepo = sh(script: "jq -r '.\"githubRepo\"' control.json", returnStdout:true).trim()
                                def parameterList = [string(name:'AGENT_TYPE', value:agent_type),
                                                    string(name:'AGENT_OS', value: agent_os),
                                                    string(name:'KUBERNETES_IMAGE_NAME', value: agent_image_link),
                                                    string(name:'jsonPinFileList', value: pinfilelist),
                                                    string(name:'githubUrl', value: githubUrl),
                                                    string(name:'target_build', value: target_build),
                                                    string(name:'target_url', value: target_url),
                                                    string(name:'device_type', value: device_type),
                                                    string(name:'commit_id', value: commit_id),
                                                    string(name:'timeout', value: timeout),
                                                    string(name:'scope', value: scope),
                                                    string(name:'github_base_sha', value: githubBaseSha),
                                                    string(name:'build_type', value: buildtype),
                                                    string(name:'review_branch', value: reviewBranch),
                                                    string(name:'orig_control_build_id', value: orig_control_build_id),
                                                    string(name:'orig_control_build_server', value: orig_control_build_server),
                                                    string(name:'first_run', value: first_run),
                                                    string(name:'parentBuildUrl', value: parentBuildUrl),
                                                    string(name:'auto_task_id', value: auto_task_id),
                                                    string(name:'githubRepo', value: githubRepo),
                                                    string(name:'targetType', value: targetType),
                                                    string(name:'dryRun', value: dryRun),
                                                    string(name:'skip_build', value: skip_build),
                                                    string(name:'rerun', value: rerun),
                                                    string(name:'retry_all', value: retry_all_tests),
                                                    string(name:'control_json', value: params.control_json)
                                                    ]
                                def testplans_count = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].testplans|length' control.json", returnStdout:true).trim().toInteger()
                                def test_dict = [:]
                                def parameters_dict = [:]
                                if (testplans_count != 0) {
                                    def test_at = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].testplans.at // empty |join(\",\")' control.json", returnStdout:true).trim()
                                    def test_et = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|.[].testplans.et // empty |join(\",\")' control.json", returnStdout:true).trim()
                                    test_dict = [:]
                                    if (test_at){
                                        test_dict['at']=test_at
                                    }
                                    if(test_et){
                                        test_dict['et']=test_et
                                    }
                                    def project_codename = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].combo_properties.project_codename' control.json", returnStdout:true).trim()
                                    def combination_name = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].combo_properties.combination_name' control.json", returnStdout:true).trim()
                                    def target_name = sh(script: "jq -r '.\"${jenkins_url}\"|.[${i}]|.[]|.[${j}]|.[].build_targets|.[${k}]|keys[]' control.json", returnStdout:true).trim()
                                    parameters_dict = ["control_build_link":parentBuildUrl,'control_build_type':buildtype,
                                                            'change_link':githubUrl, 'commit_sha': commit_id,"auto_task_id":auto_task_id,
                                                            'repo_name':githubRepo, 'repo_branch':reviewBranch,
                                                            'code': project_codename,'combo':combination_name,
                                                            'AGENT_TYPE':agent_type,'AGENT_OS': agent_os,
                                                            'target':target_name,'control_test_link': parentBuildUrl,'dryRun': 'true',
                                                            'orig_control_build_id': orig_control_build_id,'orig_control_build_server': orig_control_build_server,
                                                            'skip_build': skip_build, 'retry_all': retry_all_tests, 'target_url': target_url,'first_run': first_run,
                                                            'jsonPinFileList': pinfilelist, 'dryRun': 'true', 'device_type': device_type,
                                                            'original_auto_task_id': original_auto_task_id]
                                    println "test_dict"
                                    println test_dict
                                }
                                build_dict.put(target_build,['parameters':parameterList,'test_dict':test_dict,'parameters_dict':parameters_dict])
                            }
                        }
                    }
                }
            }
        }
        stage('triggerbuild') {
            steps {
                script {
                    catchError(buildResult:"FAILURE", stageResult:"FAILURE") {
                        trigger_jobs(build_dict)
                    }
                }
            }
        }
        stage('voting result'){
            steps{
                script {
                    echo "get voting result from all previous steps"
                    catchError {
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "delayed_vote", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send extended build event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "post_eb_control_build_end_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send acceptance build event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "post_ab_control_build_end_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send all build event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "post_control_build_end_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send acceptance test event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "post_at_control_test_end_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send extended test event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "post_et_control_test_end_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    catchError(buildResult:"SUCCESS", stageResult:"FAILURE"){
                        // Send email event
                        pipelineCommon.vote("${githubUrl}", "${commit_id}", "compose_and_publish_email_event", "", "", "${dryRun}", "true", "${params.control_json}")
                    }
                    echo "build result is ${currentBuild.result}"
                }
            }
        }
    }
}
